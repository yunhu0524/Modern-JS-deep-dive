Skip to content
Search or jump to…
Pull requests
Issues
Marketplace
Explore
 
@yunhu0524 
sbd530
/
modern-js-deep-dive
1
00
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
modern-js-deep-dive/05/README.md 
Newer           Older
 100644  175 lines (123 sloc)  6.48 KB
# 05장 표현식과 문

- 개념을 이해한다는 것은 용어를 정확히 이해하고 설명할 수 있다는 것이다. 용어를 정확히 설명할 수 있도록 개념을 다잡자.

- 이 책에 나오는 대부분의 용어는 JS뿐만 아니라 컴퓨터 공학 전반적으로 사용되는 용어이다.

- 용어에 대한 이해는 개발자 간의 소통 뿐만 아니라 서적,메뉴얼 같은 문서를 이해하도록 돕는다.

## 5.1 값

값 <sup>value</sup>은 식(표현식<sup>expression</sup>)이 평가<sup>evaluate</sup>되어 생성된 결과를 말한다.

```js
// 10 + 20은 평가되어 숫자 '값 30'을 생성한다.
10 + 20; // 30
```

모든 값은 데이터 타입을 가지며, 메모리에 2진수, 즉 비트<sup>bit</sup>의 나열로 저장된다.

변수는 **하나의 값**을 저장하기 위해 확보한 메로리 공간이기 때문에 변수에 할당되는 겂은 '값'이다.

```js
// 변수에는 10 + 20이 평가되어 생성된 숫자 값 30이 할당된다.
var sum = 10 + 20;
```

위에서 `sum` 변수에 할당되는 것은 `10 + 20`이 아니라 평가된 결과 값인 숫자 값 `30`이다.<br>
&rarr; 변수 `sum`이 기억하는 메모리 공간에 저장된 것은 `30`dlek.

## 5.2 리터럴

리터럴<sup>literal</sup>은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값은 생성하는 표기법<sup>notation</sup>을 말한다. ~~인간의 문자라고 이해했다.~~

```js
// 숫자 리터럴 3
3;
```

위의 숫자 `3`은 단순한 아라비아 숫자가 아닌 숫자 리터럴이다. 사람의 문자인 `3`을 자바스크립트 엔진이 평가하여 '숫자 값 3'을 생성한다.

자바스크립트 엔진은 코드가 실행되는 런타임<sup>runtime</sup>에 리터럴을 평가해 값을 생성한다.

| 리터럴            | 예시                            | 비고                    |
| ----------------- | ------------------------------- | ----------------------- |
| 정수 리터럴       | 100                             |
| 부동소수점 리터럴 | 10.5                            |
| 2진수 리터럴      | 0b01000001                      | 0b로 시작               |
| 8진수 리터럴      | 0o101                           | ES6에서 도입, 0o로 시작 |
| 16진수 리터럴     | 0x41                            | ES6에서 도입, 0x로 시작 |
| 문자열 리터럴     | 'Hello'<br>"World"              |
| 불리언 리터럴     | true<br>false                   |
| null 리티럴       | null                            |
| undefined 리터럴  | undefined                       |
| 객체 리터럴       | {name: 'Lee', address: 'Seoul'} |
| 배열 리터럴       | [1,2,3]                         |
| 함수 리터럴       | function() {}                   |
| 정규표현식 리터럴 | /[A-Z]+/g                       |

## 5.3 표현식

표현식<sup>expression</sup>은 값으로 평가될 수 있는 文<sup>statement</sup>이다. 즉, 표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조한다.

```js
var score1 = 80;
var score2 = 50 + 50;
```

위 코드의 `80`은 자바스크립트 엔진에 의해 평가되어 값을 생성하므로 표현식이다. `50 + 50`도 평가되어 100을 생성하므로 표현식이다.

```js
// socore 변수를 참조한다.
score2;
```

변수 식별자를 참조하면 변수 값으로 평가되므로 `socore2` 또한 표현식이다.

즉, 값으로 평가될 수 있는 문은 모두 표현식이다.

이때 표현식과 표현식이 평가된 값은 동등한 관계, 즉 동치<sup>equivalent</sup>이다. `1 + 2` 와 `3` 은 동치다.

```js
var x = 1 + 2;
// 식별자 표현식 x는 3으로 평가된다.
x + 3; // 6
```

## 5.4 문

문<sup>statement</sup>은 프로그램을 구성하는 기본 단위이자 취소 실행 단위다. 문의 집합이 프로그램이다. 명령문이라고도 부른다.

문은 여러 토큰<sup>token</sup>으로 구성되며, 토큰이란 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소를 의미한다.

```js
var sum = 1 + 2;
```

위 코드에서 `var`, `sum`, `=`, `1`, `+`, `2`, `;` 각각이 모두 토큰이다.

**_간략한 문의 예시_**

```js
// 변수 선언문
var x;
// 할당문
x = 5;
// 함수 선언문
function foo() {}
// 조건문
if (x > 1) {
  console.log(x);
}
// 반복문
for (var i = 0; i < 2; i++) {
  console.log(i);
}
```

## 5.5 세미콜론과 세미콜론 자동 삽입 기능

세미콜론(;)은 문의 종료를 나타낸다.

JS 엔진은 세미콜론으로 문의 종료를 파악하고 순차적으로 문을 하나씩 실행한다.

단, 코드 블록({...}) 뒤에는 세미콜론을 붙이지 않는다. &rarr; 코드 블록은 언제나 문의 종료를 의미하는 자체 종결성<sup>self closing</sup>을 갖기 때문.

JS 엔진은 세미콜론을 자동을 붙여주는 **세미콜론 자동 삽입 기능(ASI<sup>automatic semicolon insertion</sup>)**을 수행하기 때문에 세미콜론은 생략 가능하다.

하지만 ASI와 개발자의 예측이 일치하지 않아 골치거리가 될 수 있다.<br>
&rarr; ESLint같은 정적 분석 도구에서는 세미콜론 사용을 기본으로 설정하고 있으며 TC39(ECMAScript 기술 위원회)도 세미콜론 사용을 권장하고 있다.

## 5.6 표현식인 문과 표현식이 아닌 문

표현식인 문과 표현식이 아닌 문을 구별할 때 변수에 식을 할당해보면 된다. `var x`는 표현식일까?

```js
// 표현식이 아닌 문은 값처럼 사용할 수 없다.
var foo = var x;
// var foo = var x;
//           ^^^
// SyntaxError: Unexpected token var
```

```js
// 변수 선언문은 표현식이 아닌 문이다.
var x;
// 할당문은 그 자체가 표현식이지만 완전한 문이기도 한다. 즉, 할당문은 표현식인 문이다.
x = 100;
```

```
// 표현식인 문은 값처럼 사용할 수 있다.
var foo = x = 100;
console.log(foo); // 100
```

표현식인 문인 할당문은 할당한 값으로 평가된다. &rarr; `x = 100`은 `100`으로 평가된다.

> **_완료값_**<br>
> 크롬 개발자 도구에서 표현식이 아닌 문을 실행하면 언제나 undefined를 출력한다. 이를 완료값이라 한다.<br>
> 반면 표현식인 문을 실행하면 항상 평가된 값을 반환한다.<br>
>
> ```js
> > var foo = 10; // 문 작성후 엔터를 치면?
> > undefined // 반환값1
> >
> > 100 + foo; //반면 표현식인 문을 작성하고 엔터를 치면?
> > 110; // 반환값2
> ```
© 2021 GitHub, Inc.
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
